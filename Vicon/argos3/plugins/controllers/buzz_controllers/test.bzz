include "diffusion.bzz"
include "persistant_coverage.bzz"
include "vec2.bzz"

prox_check = {.0=1, .1=1, .2=1, .3=0.25, .5=0.25, .6=1, .7=1}

MAX_ENERGY=5
ticks = 0
ticks_per_seconds = 10.0

function init() {
  ticks = 0
  pc = nil
	log("[",id,"] init finished")
}

function step() {
  ticks = ticks + 1
  
  if(pc == nil){
    pc = persistant_coverage.create(1, MAX_ENERGY, targets, depots)
  }
  var obs = diffusion.sum_sensors_limited(proximity, prox_check)
  #var ldest = math.vec2.new((id/2-1.5)*0.5, (id%2-0.5)*0.5)
  var ldest = persistant_coverage.update(pc, pose.position, ticks/ticks_per_seconds)
  ldest = diffusion.convert_to_local_ref(ldest, pose)
  debug.print(pc.dest,":(",ldest.x,",",ldest.y,")"," energy:", pc.curr_energy)
  ldest = diffusion.vector_bound(ldest, 0.3)
  #var vector = {.x=0.1-obs.x, .y=0-obs.y}
  var vector = math.vec2.sub(ldest, obs)
  diffusion.set_wheel_speeds_from_vector(vector, 0)
}

function reset() {
  ticks = 0
}

function destroy() {

}